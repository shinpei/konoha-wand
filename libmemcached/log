# 1 "/usr/include/libmemcached/memcached.h" 1 3 4
# 14 "/usr/include/libmemcached/memcached.h" 3 4
# 15 "/usr/include/libmemcached/memcached.h" 2 3 4
# 17 "/usr/include/libmemcached/memcached.h" 2 3 4
# 20 "/usr/include/libmemcached/memcached.h" 2 3 4
# 1 "/usr/include/libmemcached/visibility.h" 1 3 4
# 22 "/usr/include/libmemcached/memcached.h" 2 3 4
# 1 "/usr/include/libmemcached/memcached_configure.h" 1 3 4
# 23 "/usr/include/libmemcached/memcached.h" 2 3 4
# 1 "/usr/include/libmemcached/memcached_constants.h" 1 3 4
# 27 "/usr/include/libmemcached/memcached_constants.h" 3 4
} memcached_return;
} memcached_server_distribution;
} memcached_behavior;
} memcached_callback;
} memcached_hash;
} memcached_connection;
# 24 "/usr/include/libmemcached/memcached.h" 2 3 4
# 1 "/usr/include/libmemcached/memcached_types.h" 1 3 4
# 16 "/usr/include/libmemcached/memcached_types.h" 3 4
typedef struct memcached_st memcached_st;
typedef struct memcached_stat_st memcached_stat_st;
typedef struct memcached_analysis_st memcached_analysis_st;
typedef struct memcached_result_st memcached_result_st;
typedef struct memcached_string_st memcached_string_st;
typedef struct memcached_server_st memcached_server_st;
typedef struct memcached_continuum_item_st memcached_continuum_item_st;
typedef memcached_return (*memcached_clone_func)(memcached_st *parent, memcached_st *clone);
typedef memcached_return (*memcached_cleanup_func)(memcached_st *ptr);
typedef void (*memcached_free_function)(memcached_st *ptr, void *mem);
typedef void *(*memcached_malloc_function)(memcached_st *ptr, const size_t size);
typedef void *(*memcached_realloc_function)(memcached_st *ptr, void *mem, const size_t size);
typedef void *(*memcached_calloc_function)(memcached_st *ptr, size_t nelem, const size_t elsize);
typedef memcached_return (*memcached_execute_function)(memcached_st *ptr, memcached_result_st *result, void *context);
typedef memcached_return (*memcached_server_function)(memcached_st *ptr, memcached_server_st *server, void *context);
typedef memcached_return (*memcached_trigger_key)(memcached_st *ptr,
                                                  memcached_result_st *result);
typedef memcached_return (*memcached_trigger_delete_key)(memcached_st *ptr,
typedef memcached_return (*memcached_dump_func)(memcached_st *ptr,
# 25 "/usr/include/libmemcached/memcached.h" 2 3 4
# 1 "/usr/include/libmemcached/memcached_get.h" 1 3 4
# 17 "/usr/include/libmemcached/memcached_get.h" 3 4
char *memcached_get(memcached_st *ptr,
                    memcached_return *error);
memcached_return memcached_mget(memcached_st *ptr,
char *memcached_get_by_key(memcached_st *ptr,
                           memcached_return *error);
memcached_return memcached_mget_by_key(memcached_st *ptr,
char *memcached_fetch(memcached_st *ptr,
                      memcached_return *error);
memcached_result_st *memcached_fetch_result(memcached_st *ptr,
                                            memcached_result_st *result,
                                            memcached_return *error);
# 26 "/usr/include/libmemcached/memcached.h" 2 3 4
# 1 "/usr/include/libmemcached/memcached_server.h" 1 3 4
# 16 "/usr/include/libmemcached/memcached_server.h" 3 4
struct memcached_server_st {
  memcached_connection type;
  memcached_st *root;
memcached_return memcached_server_cursor(memcached_st *ptr,
                                         memcached_server_function *callback,
memcached_server_st *memcached_server_by_key(memcached_st *ptr, const char *key,
                                             size_t key_length, memcached_return *error);
memcached_server_st *memcached_server_create(memcached_st *memc, memcached_server_st *ptr);
memcached_server_st *memcached_server_create_with(memcached_st *memc, memcached_server_st *host,
                                                  uint32_t weight, memcached_connection type);
void memcached_server_free(memcached_server_st *ptr);
memcached_server_st *memcached_server_clone(memcached_server_st *clone, memcached_server_st *ptr);
memcached_analysis_st *memcached_analyze(memcached_st *memc, memcached_stat_st *stat,
                                         memcached_return *error);
memcached_return memcached_server_remove(memcached_server_st *st_ptr);
# 27 "/usr/include/libmemcached/memcached.h" 2 3 4
# 1 "/usr/include/libmemcached/memcached_string.h" 1 3 4
# 16 "/usr/include/libmemcached/memcached_string.h" 3 4
struct memcached_string_st {
  memcached_st *root;
memcached_string_st *memcached_string_create(memcached_st *ptr,
                                             memcached_string_st *string,
memcached_return memcached_string_check(memcached_string_st *string, size_t need);
char *memcached_string_c_copy(memcached_string_st *string);
memcached_return memcached_string_append_character(memcached_string_st *string,
memcached_return memcached_string_append(memcached_string_st *string,
memcached_return memcached_string_reset(memcached_string_st *string);
void memcached_string_free(memcached_string_st *string);
# 28 "/usr/include/libmemcached/memcached.h" 2 3 4
# 1 "/usr/include/libmemcached/memcached_result.h" 1 3 4
# 16 "/usr/include/libmemcached/memcached_result.h" 3 4
struct memcached_result_st {
  memcached_st *root;
  memcached_string_st value;
void memcached_result_free(memcached_result_st *result);
void memcached_result_reset(memcached_result_st *ptr);
memcached_result_st *memcached_result_create(memcached_st *ptr,
                                             memcached_result_st *result);
char *memcached_result_value(memcached_result_st *ptr);
size_t memcached_result_length(memcached_result_st *ptr);
memcached_return memcached_result_set_value(memcached_result_st *ptr, char *value, size_t length);
# 29 "/usr/include/libmemcached/memcached.h" 2 3 4
# 1 "/usr/include/libmemcached/memcached_storage.h" 1 3 4
# 19 "/usr/include/libmemcached/memcached_storage.h" 3 4
memcached_return memcached_set(memcached_st *ptr, const char *key, size_t key_length,
memcached_return memcached_add(memcached_st *ptr, const char *key, size_t key_length,
memcached_return memcached_replace(memcached_st *ptr, const char *key, size_t key_length,
memcached_return memcached_append(memcached_st *ptr,
memcached_return memcached_prepend(memcached_st *ptr,
memcached_return memcached_cas(memcached_st *ptr,
memcached_return memcached_set_by_key(memcached_st *ptr,
memcached_return memcached_add_by_key(memcached_st *ptr,
memcached_return memcached_replace_by_key(memcached_st *ptr,
memcached_return memcached_prepend_by_key(memcached_st *ptr,
memcached_return memcached_append_by_key(memcached_st *ptr,
memcached_return memcached_cas_by_key(memcached_st *ptr,
# 30 "/usr/include/libmemcached/memcached.h" 2 3 4
# 38 "/usr/include/libmemcached/memcached.h" 3 4
struct memcached_analysis_st {
struct memcached_stat_st {
struct memcached_st {
  memcached_server_st *hosts;
  memcached_hash hash_continuum;
  memcached_result_st result;
  memcached_continuum_item_st *continuum;
  memcached_clone_func on_clone;
  memcached_cleanup_func on_cleanup;
  memcached_free_function call_free;
  memcached_malloc_function call_malloc;
  memcached_realloc_function call_realloc;
  memcached_calloc_function call_calloc;
  memcached_trigger_key get_key_failure;
  memcached_trigger_delete_key delete_trigger;
memcached_return memcached_version(memcached_st *ptr);
const char * memcached_lib_version(void);
memcached_st *memcached_create(memcached_st *ptr);
void memcached_free(memcached_st *ptr);
memcached_st *memcached_clone(memcached_st *clone, memcached_st *ptr);
memcached_return memcached_delete(memcached_st *ptr, const char *key, size_t key_length,
memcached_return memcached_increment(memcached_st *ptr,
memcached_return memcached_decrement(memcached_st *ptr,
memcached_return memcached_increment_with_initial(memcached_st *ptr,
memcached_return memcached_decrement_with_initial(memcached_st *ptr,
void memcached_stat_free(memcached_st *, memcached_stat_st *);
memcached_stat_st *memcached_stat(memcached_st *ptr, char *args, memcached_return *error);
memcached_return memcached_stat_servername(memcached_stat_st *stat, char *args,
memcached_return memcached_flush(memcached_st *ptr, time_t expiration);
memcached_return memcached_verbosity(memcached_st *ptr, unsigned int verbosity);
void memcached_quit(memcached_st *ptr);
char *memcached_strerror(memcached_st *ptr, memcached_return rc);
memcached_return memcached_behavior_set(memcached_st *ptr, memcached_behavior flag, uint64_t data);
uint64_t memcached_behavior_get(memcached_st *ptr, memcached_behavior flag);
uint32_t memcached_generate_hash_value(const char *key, size_t key_length, memcached_hash hash_algorithm);
uint32_t memcached_generate_hash(memcached_st *ptr, const char *key, size_t key_length);
memcached_return memcached_flush_buffers(memcached_st *mem);
memcached_return memcached_server_add_udp(memcached_st *ptr,
memcached_return memcached_server_add_unix_socket(memcached_st *ptr,
memcached_return memcached_server_add(memcached_st *ptr, const char *hostname,
memcached_return memcached_server_add_udp_with_weight(memcached_st *ptr,
memcached_return memcached_server_add_unix_socket_with_weight(memcached_st *ptr,
memcached_return memcached_server_add_with_weight(memcached_st *ptr, const char *hostname,
void memcached_server_list_free(memcached_server_st *ptr);
memcached_return memcached_server_push(memcached_st *ptr, memcached_server_st *list);
memcached_server_st *memcached_server_list_append(memcached_server_st *ptr,
                                                  memcached_return *error);
memcached_server_st *memcached_server_list_append_with_weight(memcached_server_st *ptr,
                                                              memcached_return *error);
unsigned int memcached_server_list_count(memcached_server_st *ptr);
memcached_server_st *memcached_servers_parse(const char *server_strings);
char *memcached_stat_get_value(memcached_st *ptr, memcached_stat_st *stat,
                               const char *key, memcached_return *error);
char ** memcached_stat_get_keys(memcached_st *ptr, memcached_stat_st *stat,
                                memcached_return *error);
memcached_return memcached_delete_by_key(memcached_st *ptr,
memcached_return memcached_fetch_execute(memcached_st *ptr,
                                             memcached_execute_function *callback,
memcached_return memcached_callback_set(memcached_st *ptr,
                                        memcached_callback flag,
void *memcached_callback_get(memcached_st *ptr,
                             memcached_callback flag,
                             memcached_return *error);
memcached_return memcached_dump(memcached_st *ptr, memcached_dump_func *function, void *context, uint32_t number_of_callbacks);
memcached_return memcached_set_memory_allocators(memcached_st *ptr,
                                                 memcached_malloc_function mem_malloc,
                                                 memcached_free_function mem_free,
                                                 memcached_realloc_function mem_realloc,
                                                 memcached_calloc_function mem_calloc);
void memcached_get_memory_allocators(memcached_st *ptr,
                                     memcached_malloc_function *mem_malloc,
                                     memcached_free_function *mem_free,
                                     memcached_realloc_function *mem_realloc,
                                     memcached_calloc_function *mem_calloc);
void *memcached_get_user_data(memcached_st *ptr);
void *memcached_set_user_data(memcached_st *ptr, void *data);
memcached_return run_distribution(memcached_st *ptr);
memcached_return
Memcached_behavior_set (memcached_st *ptr, memcached_behavior flag, uint64_t data)
  memcached_return rc = memcached_behavior_set(ptr, flag, data);
    warnx( "%s: %s", __func__, memcached_strerror(ptr, rc));
  struct memcached_st *mmc = ((void *)0);
  struct memcached_server_st *servers = ((void *)0);
  memcached_return *rc;
    servers = memcached_server_list_append(servers, *p, port, &rc);
      warnx(memcached_strerror(mmc, rc));
    warnx (memcached_strerror(mmc, rc));
  memcached_server_list_free(servers);
  rc = memcached_set(mmc, key1, strlen(key1),value1, strlen(value1), expire, flags);
    warnx(memcached_strerror(mmc, rc));
  rc = memcached_set(mmc, key2, strlen(key2), value2, strlen(value2), expire, flags);
    warnx(memcached_strerror(mmc, rc));
  val = memcached_get(mmc, key1, strlen(key1), &len, &flags, &rc);
    warnx (memcached_strerror(mmc, rc));
  val = memcached_get(mmc, key2, strlen(key2), &len, &flags, &rc);
    warnx (memcached_strerror(mmc, rc));
  memcached_free(mmc);
